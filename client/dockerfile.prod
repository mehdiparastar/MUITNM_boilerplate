# # Step 1: Build stage
# FROM node:18-alpine As build-stage

# WORKDIR /usr/app

# COPY package*.json ./

# RUN npm ci

# COPY . .

# RUN npm run build

# # Step 1: Production stage
# FROM nginx:1.25-alpine As production-stage

# WORKDIR /usr/share/nginx/html

# RUN rm -rf ./*

# COPY --from=build-stage /usr/app/build .

# EXPOSE 80
# #CMD [ "ping","8.8.8.8" ]
# ENTRYPOINT [ "nginx","-g","daemon off;" ]



##############################################################################





# Fetching the latest node image on apline linux
FROM node:18-alpine AS builder

# Setting up the work directory
WORKDIR /app

# Installing dependencies
COPY ./package.json ./
RUN npm install

# Copying all the files in our project
COPY . .

# Declaring env
ENV NODE_ENV production

# Building our application
RUN npm run build

# Running `npm ci` removes the existing node_modules directory and passing in --only=production ensures that only the production dependencies are installed. This ensures that the node_modules directory is as optimized as possible
RUN npm ci --omit=dev && npm cache clean --force

# Fetching the latest nginx image
FROM nginx:1.25-alpine

ENV NODE_ENV production

# Copying built assets from builder
COPY --from=builder /app/build /usr/share/nginx/html

# Copying our nginx.conf
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]