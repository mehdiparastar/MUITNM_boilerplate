###################
# BUILD FOR LOCAL DEVELOPMENT
###################

FROM node:18-alpine As development

# Create app directory
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image.
# A wildcard is used to ensure copying both package.json AND package-lock.json (when available).
# Copying this first prevents re-running npm install on every code change.
COPY --chown=node:node package*.json ./

# Install app dependencies using the `npm ci` command instead of `npm install`
RUN npm ci

# Bundle app source
COPY --chown=node:node . .

# Use the node user from the image (instead of the root user)
USER node

###################
# BUILD FOR PRODUCTION
###################

FROM node:18-alpine As build

WORKDIR /usr/src/app

COPY --chown=node:node package*.json ./

# In order to run `npm run build` we need access to the Nest CLI which is a dev dependency. In the previous development stage we ran `npm ci` which installed all dependencies, so we can copy over the node_modules directory from the development image
COPY --chown=node:node --from=development /usr/src/app/node_modules ./node_modules

COPY --chown=node:node . .

# Set NODE_ENV environment variable
ENV NODE_ENV production

# Run the build command which creates the production bundle
RUN npm run build

# Running `npm ci` removes the existing node_modules directory and passing in --only=production ensures that only the production dependencies are installed. This ensures that the node_modules directory is as optimized as possible
RUN npm ci --omit=dev && npm cache clean --force

USER node

###################
# PRODUCTION
###################

FROM node:18-alpine As production

RUN apk add g++ make py3-pip

# Install git
RUN apk update --update-cache && apk add --no-cache git

# Install ffmpeg
RUN apk update --update-cache && apk add ffmpeg

# dependencies for alpine to use make
RUN apk update --update-cache && apk add --no-cache git make cmake gcc g++ libmad-dev \
    libid3tag-dev libsndfile-dev gd-dev boost-dev \
    libgd libpng-dev zlib-dev && \
    apk add --no-cache zlib-static libpng-static boost-static && \
    apk add --no-cache autoconf automake libtool gettext && \
    wget https://github.com/xiph/flac/archive/1.3.3.tar.gz && \
    tar xzf 1.3.3.tar.gz && \
    cd flac-1.3.3 && \
    ./autogen.sh && \
    ./configure --enable-shared=no && \
    make && \
    make install


WORKDIR /audiowaveform

# Clone audiowaveform repository
RUN git clone https://github.com/bbc/audiowaveform.git .

# Build audiowaveform
RUN mkdir build && cd build && cmake -D ENABLE_TESTS=0 BUILD_STATIC=1 .. && make
RUN cd build && make install

WORKDIR /

ENV NODE_ENV=production

# Copy the bundled code from the build stage to the production image
COPY --chown=node:node --from=build /usr/src/app/node_modules ./node_modules
COPY --chown=node:node --from=build /usr/src/app/dist ./dist
COPY --chown=node:node --from=build /usr/src/app/.production.env .

# Start the server using the production build
CMD [ "node", "dist/main.js" ]
